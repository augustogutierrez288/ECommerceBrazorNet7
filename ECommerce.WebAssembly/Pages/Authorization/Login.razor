@page "/login"
@layout LoginLayout
@using ECommerce.WebAssembly.Extensions
@using Microsoft.AspNetCore.Components.Authorization
@inject IUserService _userService
@inject NavigationManager _navService
@inject IToastService _toasService
@inject AuthenticationStateProvider _authProvider


<div class="container">
    <div class="row justify-content-center">
        <div class="col-lg-5">
            <div class="card rounded-lg mt-5">
                <div class="card-header"><h3 class="text-center font-weight-light my-4">Login</h3></div>
                <div class="card-body">
                    <EditForm Model="model" OnValidSubmit="Initial">
                        <DataAnnotationsValidator></DataAnnotationsValidator>
                        <div class="form-floating mb-3">
                            <input class="form-control" id="inputEmail" type="email" placeholder="admin@example.com" @bind-value="model.Email" autocomplete="off" />
                            <label for="inputEmail">Correo</label>
                            <ValidationMessage For="@(()=>model.Email)" />
                        </div>
                        <div class="form-floating mb-3">
                            <input class="form-control" id="inputPassword" type="password" placeholder="123" @bind-value="model.Password" autocomplete="off" />
                            <label for="inputPassword">Contraseña</label>
                            <ValidationMessage For="@(()=>model.Password)" />
                        </div>

                        <div class="d-grid gap-1 mt-4 mb-0">
                            <button class="btn btn-primary" type="submit">Ingresar</button>
                        </div>
                    </EditForm>
                </div>
                <div class="card-footer text-center py-3">
                    <div class="small"><a href="/register">No tienes una cuenta? Registrate!</a></div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private LoginDTO model = new LoginDTO();

    private async Task Initial()
    {
        var response = await _userService.Authorization(model);
        if (response.IsCorrect)
        {
            SessionDTO session = (SessionDTO)response.Result!;

            var authenticationExt = (AuthExtension)_authProvider;
            await authenticationExt.UpdateStateAuthentication(session);

            if (session.Role.ToLower() == "cliente")
                _navService.NavigateTo("/");
            else
                _navService.NavigateTo("/dashboard");
        }
        else
        {
            _toasService.ShowWarning(response.Message!);
        }
    }
}
