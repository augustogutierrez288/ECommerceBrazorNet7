@page "/product"
@page "/product/{id:int}"

@inject ICategoryService _categoryService
@inject IProductService _productService
@inject IToastService _toastService
@inject NavigationManager _navService

@attribute [Authorize(Roles = "Administrador")]

<div class="row justify-content-center  mt-3">
    <p class="col-sm-12 col-md-8 col-xl-10 h4 mt-2">@title</p>
</div>
<div class="row justify-content-center  mt-3">
    <div class="col-sm-12 col-md-8 col-xl-10">

        <EditForm Model="model" OnValidSubmit="SaveChanges">
            <DataAnnotationsValidator></DataAnnotationsValidator>
            <div class="input-group">
                <span class="input-group-text bg-light" id="basic-addon3">Nombre</span>
                <input type="text" class="form-control" @bind-value="model.NameProduct">
            </div>
            <ValidationMessage For="@(()=>model.NameProduct)" />

            <div class="input-group mt-3">
                <span class="input-group-text bg-light">Descripcion</span>
                <textarea class="form-control" @bind="model.Description"></textarea>

            </div>
            <ValidationMessage For="@(()=>model.Description)" />

            <div class="input-group mt-3">
                <label class="input-group-text bg-light" for="inputGroupSelect01">Categoria</label>
                <select class="form-select" value="@model.IdCategory" @onchange="@(e => EditCategory(e))">
                    @foreach (var item in listCategory)
                    {
                        <option value="@item.IdCategory">@item.NameCategory</option>
                    }
                </select>
            </div>

            <div class="input-group mt-3">
                <span class="input-group-text bg-light" id="basic-addon3">Precio</span>
                <input type="number" class="form-control" @bind-value="model.Price">
            </div>
            <ValidationMessage For="@(()=>model.Price)" />

            <div class="input-group mt-3">
                <span class="input-group-text bg-light" id="basic-addon3">Precio Oferta</span>
                <input type="number" class="form-control" @bind-value="model.OfferPrice">
            </div>
            <ValidationMessage For="@(()=>model.OfferPrice)" />

            <div class="input-group mt-3">
                <span class="input-group-text bg-light" id="basic-addon3">Cantidad</span>
                <input type="number" class="form-control" @bind-value="model.Amount">
            </div>
            <ValidationMessage For="@(()=>model.Amount)" />

            <div class="input-group mt-3">
                <label class="input-group-text bg-light">Imagen</label>
                <InputFile type="file" class="form-control" accept="image/png, image/gif, image/jpeg" OnChange="OnFileChange"></InputFile>
            </div>

            <div class="mt-3">
                <button type="submit" class="btn btn-primary" style="width:130px">@button</button>
                <a href="/products" class="btn btn-danger" style="width:130px">Volver</a>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [Parameter]
    public int Id { get; set; }
    private string title = "Nuevo producto";
    private string button = "Crear";
    private List<CategoryDTO> listCategory = new List<CategoryDTO>();
    private ProductDTO model = new ProductDTO();

    protected override async Task OnInitializedAsync()
    {
        var response = await _categoryService.ListCategory("");
        if (response.IsCorrect)
        {
            listCategory = (List<CategoryDTO>)response.Result!;
            if (listCategory.Any() && Id == 0)
            {
                model.IdCategory = listCategory.First().IdCategory;
            }
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id != 0)
        {
            title = "Editar Producto";
            button = "Actualizar";

            var response = await _productService.GetProduct(Id);
            if (response.IsCorrect)
            {
                model = (ProductDTO)response.Result!;
            }
            else
            {
                _toastService.ShowError(response.Message);
            }
        }
    }

    void EditCategory(ChangeEventArgs e)
    {
        model.IdCategory = Convert.ToInt32(e.Value.ToString());
    }

    async Task OnFileChange(InputFileChangeEventArgs e)
    {
        FileInfo fileInfo = new FileInfo(e.File.Name);

        if (fileInfo.Extension.ToLower().Contains(".jpg") || fileInfo.Extension.ToLower().Contains(".png"))
        {
            var format = $"image/{fileInfo.Extension.Replace(".", "")}";
            var resizeImage = await e.File.RequestImageFileAsync(format, 450, 300);
            var buffer = new byte[resizeImage.Size];
            await resizeImage.OpenReadStream().ReadAsync(buffer);
            var imageData = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
            model.Picture = imageData;
        }
    }

    private async Task SaveChanges()
    {
        bool response = true;
        string message = string.Empty;

        if (Id != 0)
        {
            var res = await _productService.UpdateProduct(model);
            if (res.IsCorrect)
            {
                message = "El producto fue editado";
            }
            else
            {
                response = false;
                message = "No se pudo editar";
            }
        }
        else
        {
            var res = await _productService.CreateProduct(model);
            if (res.IsCorrect)
            {
                message = "El producto fue creado";
            }
            else
            {
                response = false;
                message = "No se pudo crear el producto";
            }
        }

        if (response)
        {
            _toastService.ShowSuccess(message);
            _navService.NavigateTo("/products");
        }
        else
        {
            _toastService.ShowError(message);
        }
    }
}