@page "/cart"

@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims

@inject ICartService _cartService
@inject ISaleService _saleService
@inject IToastService _toasService
@inject NavigationManager _navService


<div class="row mt-4">

    <div class="col-sm-8">
        <div class="card mb-3">

            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-sm bg-light table-bordered">
                        <thead class="table-primary">
                            <tr>
                                <th style="width:102px"></th>
                                <th>Producto</th>
                                <th>Precio</th>
                                <th>Cantidad</th>
                                <th>Total</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>

                            @if (listCart.Any())
                            {
                                foreach (var item in listCart)
                                {
                                    <tr>
                                        <td valign="middle">
                                            <img class="card-img-top object-fit-cover" src="@item.Product.Picture" style="width:100px">
                                        </td>
                                        <td valign="middle">@item.Product.NameProduct</td>
                                        <td valign="middle">@item.Price</td>
                                        <td valign="middle" align="center">
                                            <div class="btn-group" role="group">
                                                <button type="button" class="btn btn-danger" @onclick="(() =>Decrease(item.Product.IdProduct))">
                                                    -
                                                </button>
                                                <input class="form-control d-flex justify-content-center align-items-center" readonly="readonly" style="width:50px" @bind-value="item.Amount" />
                                                <button type="button" class="btn btn-success" @onclick="(() =>Increase(item.Product.IdProduct))">
                                                    +
                                                 </button>
                                            </div>
                                        </td>
                                        <td valign="middle">@item.Total</td>
                                        <td valign="middle">
                                            <button type="button" class="btn btn-danger" @onclick="( () => Delete(item.Product.IdProduct))">
                                                <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#ffffff">
                                                    <path d="M280-120q-33 0-56.5-23.5T200-200v-520h-40v-80h200v-40h240v40h200v80h-40v520q0 33-23.5 56.5T680-120H280Zm400-600H280v520h400v-520ZM360-280h80v-360h-80v360Zm160 0h80v-360h-80v360ZM280-720v520-520Z" />
                                                    </svg>
                                            </button>
                                        </td>
                                    </tr>
                                }

                                
                            }else{
                                <tr>
                                    <td colspan="6">
                                        <div class="alert alert-warning" role="alert">
                                           No hay productos en el carrito
                                        </div>
                                    </td>
                                </tr>
                            }
                           

                        </tbody>
                    </table>
                </div>

                
            </div>

         
        </div>
    </div>

    <div class="col-sm-4">
        <div class="card mb-3">
            <div class="card-body">
                <EditForm Model="card" OnValidSubmit="ProcessPaymet">
                    <DataAnnotationsValidator></DataAnnotationsValidator>

                    <div class="mb-2">
                        <label class="form-label">Nombre Titular</label>
                        <input type="text" class="form-control form-control-sm" placeholder="" @bind-value="card.Holder" disabled="@disabled">
                        <ValidationMessage For="@(()=>card.Holder)" />
                        
                    </div>
                    <div class="mb-2">
                        <label  class="form-label">Numero Tarjeta</label>
                        <input type="text" class="form-control form-control-sm" placeholder="##############" autocomplete="off" @bind-value="card.Number" disabled="@disabled">
                        <ValidationMessage For="@(()=>card.Number)" />
                    </div>
                    <div class="row">
                        <div class="col-sm-6">
                            <div class="mb-2">
                                <label class="form-label">Vigencia</label>
                                <input type="text" class="form-control form-control-sm" placeholder="MM/YY" autocomplete="off" @bind-value="card.Validity" disabled="@disabled">
                                <ValidationMessage For="@(()=>card.Validity)" />
                            </div>
                        </div>
                        <div class="col-sm-6">
                            <div class="mb-2">
                                <label class="form-label">CVV</label>
                                <input type="text" class="form-control form-control-sm" placeholder="###" autocomplete="off" @bind-value="card.CVV" disabled="@disabled">
                                <ValidationMessage For="@(()=>card.CVV)" />
                            </div>
                        </div>
                    </div>
                    <hr />
                    <div class="d-flex justify-content-between">
                        <div>Total a pagar:</div>
                        <div>S/. @(listCart.Sum(i => i.Total))</div>
                    </div>
                    <div class="mt-2">
                        <div class="d-grid gap-1">
                            <button class="btn btn-primary float-end" type="submit" disabled="@disabled">Procesar pago</button>
                        </div>
                    </div>
                </EditForm>

               @* COMENTAR TODO ESTO*@
                <AuthorizeView>
                    <NotAuthorized>
                        <div class="alert alert-danger mt-2" role="alert">
                            Debe iniciar sesion para poder realizar la compra
                        </div>
                    </NotAuthorized>
                </AuthorizeView>


            </div>
        </div>
    </div>
</div>

@code {
    private bool disabled = true;
    private List<CartDTO> listCart = new List<CartDTO>();
    private decimal? TotalPay = 0;
    private CardDTO card = new CardDTO();

    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        listCart = await _cartService.ReturnCart();

        var authState = await AuthenticationState;
        if (authState.User.Identity.IsAuthenticated)
            disabled = false;
    }

    private void Decrease(int id)
    {
        CartDTO item = listCart.First(p => p.Product.IdProduct == id);
        if(item.Amount - 1 > 0)
        {
            decimal? finalPrice = (item.Product.OfferPrice != 0 && item.Product.OfferPrice < item.Product.Price) ? item.Product.OfferPrice : item.Product.Price;
            item.Amount--;
            item.Total = item.Amount * finalPrice;
        }
    }

    private void Increase(int id)
    {
        CartDTO item = listCart.First(p => p.Product.IdProduct == id);   
        decimal? finalPrice = (item.Product.OfferPrice != 0 && item.Product.OfferPrice < item.Product.Price) ? item.Product.OfferPrice : item.Product.Price;
        item.Amount++;
        item.Total = item.Amount * finalPrice;
    }

    private async void Delete(int id)
    {
        CartDTO product = listCart.First(p => p.Product.IdProduct == id);
        if (product != null)
        {
            listCart.Remove(product);
            await _cartService.DeleteFromCart(id);
        }
    }

    private async Task ProcessPaymet()
    {
        if(listCart.Count == 0)
        {
            _toasService.ShowWarning("No se encontraron productos");
            return;
        }

        List<SalesDetailDTO> detailDTOs = new List<SalesDetailDTO>();

        foreach(var item in listCart)
        {
            detailDTOs.Add(new SalesDetailDTO()
            {
                IdProduct = item.Product.IdProduct,
                Amount = item.Amount,
                Total = item.Total
            });
        }

        var authState = await AuthenticationState;
        string idUser = authState.User.Claims.Where(c => c.Type == ClaimTypes.NameIdentifier).Select(c => c.Value).Single();

        SaleDTO model = new SaleDTO()
            {
                IdUser = Convert.ToInt32(idUser),
                Total = listCart.Sum(i => i.Total),
                SalesDetails = detailDTOs
            };

        var response = await _saleService.Register(model);

        if (response.IsCorrect)
        {
            await _cartService.ClearCart();
            _toasService.ShowWarning("La venta fue registrada");
            _navService.NavigateTo("/");
        }
        else
        {
            _toasService.ShowError(response.Message);
        }
    }
}
